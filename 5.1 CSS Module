- Nếu chưa có sử dụng webpack thì chạy lệnh: npm run eject
- Vào webpack.config.js
- Trong module: {} -> rule
- Find: test /\.css$/, -> loader by css-loader
- Trong options
 
options: {
	    modules: {
	        localIdentName: "[name]__[local]___[hash:base64:5]", //tự động tạo tên class unique
	    },
}

=>Sau đó import class thành 1 cách khác thay vì import ./App.css thì:
import classes from './App.css'

return(
  <div className={classes.App}>
    <button className={classes.Button}></button>
  </div>
)

[Dynamic]
- Khai báo thêm trong CSS
.Button.Red {
  background-color: red;
}
.Button.Red:hover {
  background-color: salman;
}


const btnClass = [classes.Button];
if (isShow) {
  btnClass.push(classes.Red)
}

return(
  <div className={classes.App}>
    <button className={btnClass.join(' ')}></button>
  </div>
)


***Hoặc có thể khai báo
.App {
}
.App button {
  background-color: green;
}
.App button.Red {
  background-color: red;
}

const btnClass = '';
if (isShow) {
  btnClass = classes.Red;
}

return(
  <div className={classes.App}>
    <button className={btnClass}></button>
  </div>
)


***NOTE
- Nếu sử dụng react-script 2 or higher thì không cần phải npm run eject
- Chỉ cần thêm "module" vào tên của file css
Person.module.css
import classes from './Person.module.css'


[Config] Vừa sử dụng được css và module css
module: {
  rules: [
    {
      test: /\.css$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            importLoaders: 1,
            modules: {
	        localIdentName: "[name]__[local]___[hash:base64:5]", //tự động tạo tên class unique
	    },
          }
        }
      ],
      include: /\.module\.css$/    //bao gồm file là module.css
    },
    {
      test: /\.css$/,
      use: [
        'style-loader',
        'css-loader'
      ],
      exclude: /\.module\.css$/   //loại trừ các file là  module.css
    }
  ]
}

