1. Condition
- Đối với Vuejs ta thường v-if để render HTML, nhưng với JSX ta sử dụng condition trong {}
- Chỉ sử dụng được statement đơn giản (ternary expression) trong JSX code, ko thể mở block statement

{ isShow ?
  <div>
    ...
  </div> : null
}

- Nhưng nếu condition cực kỳ phức tạp thì ta có thể code trước phần return (để có thể sử dụng đc block statement)
render() {
  let person = null;
  if (isShow) {
    person = (
      <div>
      ...
    </div>
    )    
  }
}
[JSX code] inject vào JSX {person}


2. List
{
  this.state.person.map(x => {
    return <Person name={x.name} />
  })
}

- Lúc này chúng ta không truyền key vào nó sẽ báo warning: tìm hiểu vì sao chúng ta cần phải truyền key
deletePersonHandler(personIndex) {
    const persons = this.state.persons;
    persons.splice(personIndex, 1);
    this.setState({persons: persons})
}
=> có lỗ hỏng trong cách tiếp cận này (const persons = this.state.persons;) -> point tới original state 
+ persons.splice(personIndex, 1): tác động thay đổi tới original state dẫn tới ko dự đoán được
+ cách tiếp cận tốt hơn là create new object và setState với object đó. Sử dụng:
const persons = this.state.persons.slice() or [...this.state.persons]


{
  this.state.person.map((x, index) => {
    return <Person 
        click={() => this.deletePersonHandler(index)}
        name={x.name} 
      />
  })
}
 - Chúng ta cần thêm property key vào <Person/> vì sẽ giúp cho react nhận biết từng thành phần và sẽ re-render những cái changed thay vì toàn bộ list
 - key sẽ nhận 1 giá trị unique như ID
 - Nếu key gán là index: mỗi khi list change thì mỗi element sẽ nhận index mới -> not a good key
 
 
3. Flexible update name
nameChangeHandler = (event, id) => {
  const personIndex = this.state.persons.findIndex(p => p.id === id);
  const person = {...this.state.persons[personIndex]};
  person.name = event.target.value;
  const persons = [...this.state.persons];
  persons[personIndex] = person;
  
  this.setState({persons: persons})
}
JSX:  <Person changed={(event) => this.nameChangeHandler(event, person.id)} name={this.name}></Person>
