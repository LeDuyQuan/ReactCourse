1. Useful
- Allow for attaching reuse logic to component
- Use state and lifecycle inside React functional component
- Build 100% app with React functional component (without class)

2. Two way binding
- Ý tưởng: mỗi khi user nhìn thấy gì đó mới trên màn hình thì tức là nó đang được theo dõi với trạng thái mới (new state)
- VD: Khi user dùng trình duyệt nhập vào input. Mỗi ký tự mà user nhập sẽ kích hoạt 1 sự kiện, và sự kiện đó sẽ thay thế giá trị hiện tại bằng giá trị mới

3. useState
const [count, setCount] = useState(0);
- Giá trị của count ban đầu là 0
- useState sẽ trả về một mảng

onChange={(e) => {setCount(e.target.value)}}

- Giúp cho functional component sử dụng đuợc state
- useState là replacing chứ ko phải merging: ví dụ const [count, setCount] = useState({name: 'A', value: 6});
+ setCount({name: 'B'}) -> value bị mất
+ vì vậy phải dùng: setCount({ ...count, name: 'B'})

- initial state:
const initCount = getInitCount(); 
const [count, setCount] = useState(initCount);
-> const [count, setCount] = useState(() => {return abc});
// lần render đầu tiên count sẽ có giá trị là getInitCount(), những lần render tiếp theo sẽ là null

4. useRef: cho phép access trực tiếp vào DOM
const imageRef = useRef(null)
<img onMouseOver={() => { imageRef.current.src = 'http:://' }} src={imageUrl} ref={imageRef}/>
- Bây giờ chúng ta có thể truy cập imag.current

- useRef sẽ giúp tạo ra object, và object sẽ ko thay đổi giữa những lần render
imageRef.current = 'something'

5. useEffect:
- sử dụng thay thế cho lifecycle hooks
- useEffect nhận param là 1 function
- run for every update
- Kết hợp cả 3 hooks: didMount, didUpdate và willUnmout
- Có thể tạo nhiều useEffect để quản lý side-effect
+ Tham số đầu tiên của useEffect là 1 hàm thực thi
+ Tham số thứ hai là mảng dependency

useEffect(() => {
  //Http request
  //Ko khai báo dependencies -> luôn luôn được chạy khi render
  return () => {
    // Run trước khi rerender hoặc khi unmount
  }
})

*** didMount
useEffect(() => {
  //Chỉ run first time
  axios.get(listPerson);
  return () => {
    // Chỉ chạy khi unmount
  }
}, []) //no dependencies

*** didUpdate
useEffect(() => {
  //Run first time
  //Run again nếu props.person change
  axios.post(savePerson);
  return () => {
    // Run trước khi rerender hoặc khi unmount
  }
}, [props.person])
-> useEffect này đang bao gồm didMount và didUpdate

*** willUnmout
useEffect(() => {
  axios.get(listPerson);
  
  return () => {
    //cleanup work
  }
}, [])

- Dưới đây là trường hợp có thể hữu dụng khi muốn cancel 1 số hoạt động mỗi khi re-render
useEffect(() => { //nếu không có argument thì sẽ luôn chạy khi re-render
  console.log('Chạy thứ 2')
  return () => {
    console.log('Chạy trước')
    //cleanup work 
  }
})


6.
function App(){
  // executed before each render
  const [color, setColor] = useState('deepblack')
  useEffect(() => {
    // do your side effect here
    
    return () => {
      // clean up
    }
  }, [])
  
  // rendering
  return <h1>Front End React</h1>
}

6.1. Workflow of useEffect
MOUNTING
- rendering
- run useEffect()

UPDATING (nếu dependence thay đổi)
- reredering
- run useEffect cleanup
- run useEffect

UNMOUNT
- run useEffect cleanup
