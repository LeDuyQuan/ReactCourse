1. Middleware trong Redux
- Dùng để xử lý các async action (chưa có dữ liệu fetch về mà đã dispatch rồi), cụ thể là đợi sau khi có data rồi mới dispatch
- Là lớp nằm giữa Recucer và dispatch Action

2. Redux thunk
- Là function mà return lại một function khác. ( thay vì return trực tiếp kết quả thì thunk lại return ra 1 function và 
trong function đó làm tiếp một vài nhiệm vụ nữa sau đó mới return ra kết quả cuối cùng.)
- Khi dispatch 1 action, nếu đó là một PJO, Thunk sẽ chuyển action đó đến Reducer như thường lệ, nhưng nếu action đó trả về là một function, 
Redux Thunk sẽ "chặn" action đó lại và đợi cho đến khi một lệnh asynchronous nào đó trong function hoàn tất và trả về kết quả.

- VD rõ hơn: Action thường trả về dạng object (plain Javascript object). Ta muốn gọi một API để trả về một list "Trending" thì action của mình không thể 
trả về một plain Javascript object thông thường được (tức xử lý async thì ko thể trả về object như mong đợi -> do babel biên dịch ra), nên ta sẽ phải trả về một async function. 

Ex:
------------------
// Action
export const fetchTrending = (trendings) => ({
  type: Types.FETCH_TRENDING,
  trendings
})

// Đây là trường hợp khi ta muốn dispatch 1 action nhưng phải cần 1 function call data từ API 
// Sử dụng thunk function và return về 1 async function, và thực hiện dispatch ở trong async function ấy (thunk function và dispatch action viết chung với nhau)
// Thunk.js or Action
export const fetchTrendingAsync = () => {  // thunk function -> trả về 1 function và function này sẽ tiến hành call api để lấy về data
  return (dispatch) => {                     // async function -> redux thunk sẽ cho phép chương trình dừng lại cho đến khi api gọi xong và trả về kết quả.
    callAPI().then(({data})=>{
      dispatch(fetchTrending(data.data));    // dispatch action khác
    })
  }
}
=> handle side effect khi đang dispatch action

// JSX file
dispatch(fetchTrendingAsync()) -> đây là dispatch thunk action
------------------


* Luồng chạy của Thunk: dispatch 1 thunk function => thunk chạy => thunk dispatch các action liên quan => 
reducer bắt được các action liên quan => lưu state vào store

- Nhược điểm:
+ Không thể tạm dừng 1 request hoặc hủy request khi đang gọi api
+ Bài toán click vào button để fetch data, nếu click liên tục thì chỉ lấy những lần click sau cùng
+ Không thể tự động gọi lại request vài lần khi có sự cố mạng xảy ra


3. Redux Saga
- Khác với Redux-Thunk thì Redux-Saga tạo ra phần side-effect độc lập với dispatch actions và mỗi action sẽ có một saga tương ứng.
- Redux saga cung cấp các hàm helper effect, các hàm này sẽ trả về một effect object chứa đựng thông tin đặc biệt chỉ dẫn middeware của Redux 
có thể thực hiện tiếp các hành động khác. 
+ Các hàm helper effect sẽ được thực thi trong các generator function. (function * yield) 
+ Generator function là một tính năng mới trong ES6, nó cũng là một function. Tuy nhiên điểm đặc biệt của function này là có thể tạm dừng (bằng yield) để thực thi một việc khác, 
hoặc có thể gọi đến một Generator function khác.
- Gồm 
+ Worker: là 1 hàm làm nhiệm vụ get/fetch data từ api về sau đó dispatch 1 action
+ Watcher: là 1 hàm nào đó có nhiệm vụ lắng nghe 1 action nào đó ở view và gọi 1 worker tương ứng để xử lý action đó

Ex:
------------------
// Action
export const fetchEmployeeListStart = () => ({
  type: FETCH_EMPLOYEE_LIST_START
})

// JSX file
dispatch(fetchEmployeeListStart()) // dispatch action

// Saga
function* fetchEmployeeWorker() {  => Worker
  try {
    const { getEmployeeList } = EmployeeService;
    const response = yield call([EmployeeService, getEmployeeList]);
    const employeeData = response.data;
    
    yield put(fetchEmployeeListSuccess(employeeData));   // dispatch các action khác
  } catch (error) {
    yield put(fetchEmployeeListError(error))
  }
}

takeEvery(FETCH_EMPLOYEE_LIST_START, fetchEmployeeWorker),    => Watcher
------------------

* Luồn chạy của Saga: dispatch 1 action => reducer bắt được action => saga bắt được action (Watcher) =>
saga dispatch các action liên quan (Worker) => reducer bắt được các action liên quan => lưu state vào store

=> Nếu ở Redux-Thunk thì ta sẽ dispatch trực tiếp một action trong thunk function. 
Nhưng ở Redux-Saga thì ta dispatch một action thông thường, saga sẽ lắng nghe action đó và sẽ thực hiện một side-effect.


3.1. Các effect handling của saga 
- Fork: dùng để rẽ nhánh, chia task và các task đó chạy song song 
+ Dùng trong worker
+ VD
function* rootSaga() {
  yield fork(fetchEmployeeWorker)
  yield fork(fetchTaskWorker)
}
+ Sử dụng: nhóm các saga như authSaga có login, logout, refreshToken


- Take: tạm dừng cho đến khi nhận được action (các dòng code phía sau take sẽ chờ).
+ Dùng trong worker
+ VD
function* fetchDataWorker() {
  yield take(types.FETCH_DATA)
}


- Delay: tạm dừng trong khoảng timer
+ VD
function* fetchDataWorker() {
  yield delay(1000)
  // other code
}
+ Sử dụng: thuong dùng kết hợp với takeLatest để xử lý debounce


- Call: gọi function. Nếu nó return về một promise, tạm dừng saga cho đến khi promise được giải quyết
+ VD
function* fetchDataWorker() {
  const { getEmployeeList } = EmployeeService;
  const response = yield call([EmployeeService, getEmployeeList]);   -> supports passing a 'this' EmployeeService to getEmployeeList
}


- Put: dispatch một action.
function* fetchDataWorker() {
  yield put(fetchListTaskSuccess(data))
}


- takeEvery: thực thi và trả lại kết quả của mọi actions được gọi
takeEvery(types.FETCH_EMPLOYEE_LIST_START, fetchEmployeeWorker)


- takeLatest: nếu thực hiện 1 loạt các action, takeLatest sẽ chỉ thực thi và lấy kết quả của action cuối cùng
+ Thay thế fork và vòng lặp vô tận while (true) {}, chứa take
+ Bình thuơng ta cần phải fork sang 1 nhánh worker mới để thực hiện 1 công việc, và worker này phải luôn chạy vòng lặp vô tận (có chứa take 1 action)
để lắng nghe 1 action
+ Tức thay vì yield fork(fetchEmployeeWorker) và trong fetchEmployeeWorker có chứa while(true) { take(types.FETCH_EMPLOYEE_LIST_START) ... }
+ Thì takeLatest đã bao lại fork và take với cú pháp takeLatest(types.FETCH_EMPLOYEE_LIST_START, fetchEmployeeWorker)


- Select: lấy state từ redux store
+ yield select(state => state.task.listTask)


