1. Setting State Correctly
- setState ko trigger ngay lập tức khi call setState ở dòng code nào đó (ko đảm bảo để thực thi và finish ngay lập tức)
setState({
  persons: person,
  changeCouter: this.state.changeCouter + 1
})
-> Vì thế "this.state" ko đảm bảo là latest hay là previous state (giả sử cũng gọi setState ở somewhere esle in project, mà setState này chạy đồng thời hoặc
có thể chạy sớm hơn. Vì thế "this.state" có thể depend vào state ko mong đợi)

- Vì vậy khi muốn update 1 state mà state đó phải dựa vào old state để tính toán thì chúng ta nên:
setState((prevState, props) => {
  return {
    persons: person,
    changeCouter: prevState.changeCouter + 1
  }
})

***Tại sao chúng ta phải dùng setState để mutate data thay vì update tự do hơn? ví dụ this.state.persons = person
- Vì React muốn re-run các life cycle hooks componentWillReceiveProps, shouldComponentUpdate, componentWillUpdate, render, componentDidUpdate
mỗi khi state change, React sẽ biết state change thông qua setState function. Nếu không, React sẽ phải làm nhiều việc hơn để track (theo dõi)
các thay đổi. Để làm nó đơn giản nên React sử dụng setState.


2. Using PropTypes
- Tạo kịch bản để truyền props chính xác cho 1 component
- Tránh truyền những props ko cần thiết và throw error (or warning) nếu truyền props ko chính xác
npm install --save prop-types
import PropTypes from 'prop-types'
 Person.propTypes = {
  click: PropTypes.func,
  name: PropTypes.string,
  age: PropType.number,
  changed: PropTypes.func
 }
 
 
 3. Refs
 - Nếu ta muốn focus vào input cuối cùng sau khi render: trong class Person.js
 class Person extends Component {
  componentDidMount(){
    //document.querySelector('input').focus(); sẽ focus vào input đầu tiên trong DOM
    this.inputElement.focus();
  }
  render(){
    return (
      <input
        ref = {(inputEl) => {this.inputElement = inputEl}}  //gán giá trị cho inputElement trong class, nên only use ref in class component
        type="text"
        onChange
        value
      >
    )
  }
 }
 
 - ref là 1 property cũng như index được hiểu bởi React
 - In React 16.3 ta có 1 cách mới để sử dụng ref
 contructor(){
  this.inputElementRef = React.createRef();
 }
 //Intead
 ref={this.inputElementRef} //React make connection và cho phép this.inputElement access element
 
 componentDidMount(){
  this.inputElement.current.focus()
 }
 
 *** Sử dụng ref trong functional component
 import React, {useRef} from 'react'
 const cockpit = props => {
  const btnRef = useRef(null);
  useEffect(() => {
    btnRef.current.click()  //trong react hook, render sẽ chạy đầu tiên, sau đó các hook mới chạy
  }, [])
  
  return (
    <button ref={btnRef}></button>
  )
 }


4. Context API (gần giống Redux)
- Khi muốn pass 1 prop từ component top A xuống component D thì bình thường phải pass via 2 component B và C nữa.
- Tức là trường hợp ta có long chains of data want to pass
- Vì vậy React có 1 feature là context, nó là 1 global JS value đc React tạo ra. Tuy nhiên chúng ta có thể decide phạm vi hoạt động.

* Tạo 1 file chứa state muốn pass
const authContext = React.createContext ({
  authenticated: false,
  login: () => {}
})

* File Top A
import AuthContext from '..'
<AuthContext.Provider value = {{
  authenticated: this.state.authenticated,  //logic ở trong file A
  login: this.loginHandler
}}>
...
</AuthContext.Provider>

* File child muốn sử dụng state
import AuthContext from '..'
<AuthContext.Consumer>
  {(context) => <button onClick={context.login}></button>}
</AuthContext.Consumer>

=> Với tiếp cận createContext này chỉ sử dụng trong class-component, và ko thể access state của Context vào trong componentDidMount  

- Ta có tiếp cận mới: ko cần phải wrap component
static contextType = AuthContext; //React auto connect class component và AuthContext và cung cấp 1 property là "context" property
- Sử dụng:
componentDidMount() {
  this.context.authenticated
}

- Đối với fucntion component thì ta sử dụng: useContext
const authContext = useContext(AuthContext);
-> <button onClick={authContext.login}></button>
