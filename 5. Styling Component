1. Styles Dynamically 
const style = {
  backgroundColor: 'green'
}
if (isShow) {
    //do something
    style.backgroundColor = 'red'
}

return(
  <button style={style}></button>
)


2. Class Dynamically
const classes = [];
if (this.state.persons.length <= 2) {
  classes.push('red');
}
if (this.state.persons.length <= 1) {
  classes.push('bold');
}

<p className={classes.join(' ')}></p>


3. <Radium> Sử dụng pseudo code and query media for inline style css
- Install RADIUM package
import Radium from 'radium'
export default Radium(App);

-> inline styles

const style = {
  backgroundColor: 'green',
  ':hover': {
    backgroundColor: 'lightgreen',
    color: 'black'
  },
  '@media (min-width: 500px)': {
    width: '450px'
  }
}

[Dynamic]
if (isShow) {
    //do something
    style.backgroundColor = 'red';
    style[':hover'] = {
      backgroundColor: 'lightred',
      color: 'black'
    }
}

- Đối với query media hay sử dụng animation thì ta cần wrap lại với StyleRoot nữa
import Radium, {StyleRoot} from 'radium';
<StyleRoot>
  <button style={style}></button>
</StyleRoot>


4. <Styled Component>
- Install styled component
import styled from 'styled-components'
- styled sẽ có tất cả mọi tag trong HTML như div, button,...
- Tạo bằng styled sẽ return về 1 React component

***Styled sẽ tự động create class và import trên head HTML, sau đó sử dụng bằng auto className đó
-> not inline style - khai báo style trên head và gọi class sử dụng

const StyledButton = styled.button`
  background-color: green;
  cursor: pinter;
  
  &:hover {
    background-color: lightgreen;
  }
`

return(
  <div className="abc">
    <StyledButton onClick={}>Click</StyledButton>
  </div>
)

[Dynamic]
return(
  <div className="abc">
    <StyledButton show={isShow} onClick={}>Click</StyledButton>
  </div>
)

const StyledButton = styled.button`
  background-color: ${props => props.show ? 'red' : 'green'};
  cursor: pinter;
  
  &:hover {
    background-color: lightgreen;
  }
`
