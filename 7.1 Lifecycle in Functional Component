1.useEffect
- sử dụng thay thế cho lifecycle hooks
- useEffect nhận param là 1 function
- run for every update
- Kết hợp cả 3 hooks: didMount, didUpdate và willUnmout
- Có thể tạo nhiều useEffect để quản lý side-effect

useEffect(() => {
  //Http request
})

*** didMount
useEffect(() => {
  axios.get(listPerson);
}, []) //no dependencies -> never run (chỉ run first time)

*** didUpdate
useEffect(() => {
  axios.post(savePerson);
}, [props.person]) //chỉ định khi person change thì useEffect này mới thực thi

*** willUnmout
useEffect(() => {
  axios.get(listPerson);
  
  return () => {
    //cleanup work
  }
}, [])

- Dưới đây là trường hợp có thể hữu dụng khi muốn cancel 1 số hoạt động mỗi khi re-render
useEffect(() => { //nếu không có argument thì sẽ luôn chạy khi re-render
  console.log('Chạy thứ 2')
  return () => {
    console.log('Chạy trước')
    //cleanup work 
  }
})


2. getDerivedStateFromProps ko cần nữa vì đã có props là param của functional component
Ex: const cockit = props => {}
- Sau đó có thể sử dụng useState để tạo state từ props  


3. React.memo
- shouldComponentUpdate là 1 hooks quan trọng để prevent re-render ko cần thiết
- Sử dụng React.memo thay thế trong functional component

const cockpit = props => {}
export default React.memo(cockpit);

- Nó sẽ ghi nhớ, store 1 snapshot của component này. Và khi input change -> re-render (tức tránh re-render khi parent re-render)
- Nếu vẫn re-render thì kiểm tra lại props truyền vào hay handle những attribute truyền vào. 


4. When should you optimize
- Trên thực tế thì những dòng code trong shouldComponentUpdate và React.memo sẽ luôn thực thi và check.
- Mặc dù ko ảnh hường nhiều tới performance nhưng phải lưu ý về mức độ re-render của 1 component.


